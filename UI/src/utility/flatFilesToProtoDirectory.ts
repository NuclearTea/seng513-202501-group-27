import { File, Directory, Child } from "../proto/filetree/filetree_pb";

/**
 * @param files Array of `File` objects generated by `protoc-gen-ts`
 * @returns A `Directory` instance representing the root with nested structure
 */
export function buildDirectoryTree(files: File[]): Directory {
  const root = new Directory();
  root.setName("root");
  root.setPathList([]);

  for (const file of files) {
    let currentDir = root;

    const path = file.getPathList();

    for (let i = 0; i < path.length - 1; i++) {
      const dirName = path[i];

      // Try to find existing directory in children
      let childDir = currentDir.getChildrenList().find((child) => {
        if (child.hasDirectory()) {
          return child.getDirectory()?.getName() === dirName;
        }
        return false;
      });

      if (!childDir) {
        const newDir = new Directory();
        newDir.setName(dirName);
        newDir.setPathList(path.slice(0, i + 1));

        const newChild = new Child();
        newChild.setDirectory(newDir);

        currentDir.addChildren(newChild);
        childDir = newChild;
      }

      currentDir = childDir.getDirectory()!;
    }

    // Create and add file as a child
    const fileChild = new Child();
    fileChild.setFile(file);

    currentDir.addChildren(fileChild);
  }

  return root;
}
